version: '3.8'

services:
  github-mcp-server:

    image: node:18-alpine
    container_name: github-mcp-server
    working_dir: /app
    environment:
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-3000}
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${MCP_SERVER_PORT:-3000}:3000"
    volumes:
      - ./mcp-github-server:/app
      - /app/node_modules
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          echo 'Setting up GitHub MDP Server...'
          npm init -y
          npm install @modelcontextprotocol/sdk-nodejs @octokit/rest express cors dotenv
          cat > server.js << 'EOF'
const { Server } = require('@modelcontextprotocol/sdk-nodejs');
const { Octokit } = require('@octokit/rest');
const express = require('express');
const cors = require('cors');
require('dotenv').config();

const app = express();
const port = process.env.MCP_SERVER_PORT || 3000;

// Enable CORS for all routes
app.use(cors());
app.use(express.json());

// Initialize Octokit with GitHub token
const octokit = new Octokit({
  auth: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,
});

// MCP Server instance
const server = new Server(
  {
    name: 'github-mcp-server',
    version: '1.0.0',
  },
  {
    capabilities: {
      resources: {},
      tools: {},
    },
  }
);

// GitHub API wrapper functions
const githubTools = {
  async getRepository(owner, repo) {
    try {
      const { data } = await octokit.rest.repos.get({ owner, repo });
      return data;
    } catch (error) {
      throw new Error(\`Failed to get repository: \${error.message}\`);
    }
  },

  async listRepositories(username, type = 'all') {
    try {
      const { data } = await octokit.rest.repos.listForUser({
        username,
        type,
        sort: 'updated',
        per_page: 30,
      });
      return data;
    } catch (error) {
      throw new Error(\`Failed to list repositories: \${error.message}\`);
    }
  },

  async getIssues(owner, repo, state = 'open') {
    try {
      const { data } = await octokit.rest.issues.listForRepo({
        owner,
        repo,
        state,
        per_page: 50,
      });
      return data;
    } catch (error) {
      throw new Error(\`Failed to get issues: \${error.message}\`);
    }
  },

  async createIssue(owner, repo, title, body, labels = []) {
    try {
      const { data } = await octokit.rest.issues.create({
        owner,
        repo,
        title,
        body,
        labels,
      });
      return data;
    } catch (error) {
      throw new Error(\`Failed to create issue: \${error.message}\`);
    }
  },

  async getPullRequests(owner, repo, state = 'open') {
    try {
      const { data } = await octokit.rest.pulls.list({
        owner,
        repo,
        state,
        per_page: 50,
      });
      return data;
    } catch (error) {
      throw new Error(\`Failed to get pull requests: \${error.message}\`);
    }
  },
};

// Express routes for HTTP API
app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

app.get('/api/repos/:owner/:repo', async (req, res) => {
  try {
    const { owner, repo } = req.params;
    const repository = await githubTools.getRepository(owner, repo);
    res.json(repository);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/users/:username/repos', async (req, res) => {
  try {
    const { username } = req.params;
    const { type } = req.query;
    const repositories = await githubTools.listRepositories(username, type);
    res.json(repositories);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/repos/:owner/:repo/issues', async (req, res) => {
  try {
    const { owner, repo } = req.params;
    const { state } = req.query;
    const issues = await githubTools.getIssues(owner, repo, state);
    res.json(issues);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/repos/:owner/:repo/issues', async (req, res) => {
  try {
    const { owner, repo } = req.params;
    const { title, body, labels } = req.body;
    const issue = await githubTools.createIssue(owner, repo, title, body, labels);
    res.json(issue);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/repos/:owner/:repo/pulls', async (req, res) => {
  try {
    const { owner, repo } = req.params;
    const { state } = req.query;
    const pulls = await githubTools.getPullRequests(owner, repo, state);
    res.json(pulls);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Start the server
app.listen(port, '0.0.0.0', () => {
  console.log(\`GitHub MCP Server running on port \${port}\`);
  console.log(\`Health check: http://localhost:\${port}/health\`);
  console.log(\`API endpoints available at: http://localhost:\${port}/api\`);
});

// Handle graceful shutdown
process.on('SIGTERM', () => {
  console.log('Received SIGTERM, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('Received SIGINT, shutting down gracefully');
  process.exit(0);
});
EOF
        fi
        npm start
      "
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Add a simple web UI for testing
  mcp-web-ui:
    image: nginx:alpine
    container_name: mcp-web-ui
    ports:
      - "8080:80"
    volumes:
      - ./web-ui:/usr/share/nginx/html:ro
    depends_on:
      - github-mcp-server
    networks:
      - mcp-network
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge

volumes:
  node_modules:
    driver: local